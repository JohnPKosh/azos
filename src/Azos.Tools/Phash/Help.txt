<push><f color=magenta>
 Usage:
<f color=white>
   safe <f color=darkCyan>[-h | -? | -help]
              [-k | -key  bit_length]
              [-pp | -pretty]
              [-ne | -noentropy]
              [-st | -score]
              [-lvl | -level]
              [-list]
              [-alg]
              [-safe]
              [-protect]
              [-unprotect]
 <f color=green>
  Note: <f color=darkred>
   `safe`|`pwd`|`phash` <f color=darkgray>can be used interchangeably as they are aliases for the same command

<f color=magenta>
 Options:

 <f color=darkCyan>-h | -help | /?<f color=gray> - displays help message
 <f color=darkCyan>-k | -key  bit-length <f color=gray> - generates a random key of the specified bit length
 <f color=darkCyan>-pp | -pretty <f color=gray> - pretty prints hashed password
 <f color=darkCyan>-ne | -noentropy <f color=gray> - precludes extra entropy acquisition from user
 <f color=darkCyan>-st | -score  <int><f color=gray> - strength score threshold
 <f color=darkCyan>-alg | -algorithm  <name><f color=gray> - use specified named password hashing algorithm
 <f color=darkCyan>-list<f color=gray> - list all registered password hashing algorithms
 <f color=darkCyan>-lvl | -level  <level><f color=gray> - the strength level of hash
              level = <f color=darkRed>Default| Minimum |BelowNormal|Normal|AboveNormal|Maximum
 <f color=darkCyan>-safe  algo=<algo><f color=gray> - the strength level of hash
              algo = <f color=darkRed>Algorithm name which mut be present in TheSafe

 <f color=darkCyan>-protect path pwd=string pfx=string ext=string recurse=bool delete=bool <f color=gray> - perform directory protection

 <f color=darkCyan>-unprotect path pwd=string pfx=string ext=string recurse=bool delete=bool <f color=gray> - perform directory unprotection

<f color=magenta>
 Examples:
<f color=yellow>
  pwd -pp -st 90 -lvl Normal<f color=gray>
 Pretty print with score threshold 90% hashing strength Normal

 <f color=yellow>
  pwd -alg kdf2023 -ne<f color=gray>
 Use 'kdf2023' algorithm skipping extra entropy acquisition

 <f color=yellow>
  safe -k 256<f color=gray>
 Generate 256 crypto-safe random key of 256 bits in length

  <f color=yellow>
  safe -k 256 -safe algo=keyer<f color=gray>
 Generate 256 crypto-safe random key of 256 bits in length and
 output its protected value using the `keyer` safe algorithm

 <f color=yellow>
  safe -protect c:\sky\safe pwd=123 delete=true recurse=true <f color=darkgray>
 and complimentary<f color=yellow>
  safe -unprotect c:\sky\safe pwd=123 delete=true recurse=true<f color=gray>
 Using the specified password protect and unprotect files starting with default prefix `safe--`
 with default extension `.safe` delete the originals and recurse into subdirectories.

 <f color=yellow>
  safe -protect c:\sky\safe delete=true recurse=true <f color=darkgray>
 and complimentary<f color=yellow>
  safe -unprotect c:\sky\safe delete=true recurse=true<f color=gray>
 Same as above, but get prompted for a password

<pop>