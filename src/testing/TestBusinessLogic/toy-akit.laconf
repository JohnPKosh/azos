app
{
  log-root=$(~AZOS_TEST_ROOT)\
  log-csv="Azos.Log.Sinks.CSVFileSink, Azos"
  debug-default-action="Log,Throw"

  cloud-origin="local"

 web-settings
 {
    social
    {
        provider
        {
          type="Azos.Web.Social.Facebook, Azos.Web"
          app-id="410577972401564"
          client-secret="ffd9140afcd6b1e743e7affa9613d7f4"
        }

        provider
        {
          type="Azos.Web.Social.Twitter, Azos.Web"
          client-code="7wzQlicXz5sdM5ScrxSrNg"
          client-secret="OEb6gMSFwMBLew2BhHp3y6FgK4vxfoQmJBYG2Exb4E"
        }
    }

    web-dav {}

 }


  log
  {
    name="LogSvc"

    sink
    {
     type=$(/$log-csv)
     name="WaveTestSite Log"
     path=$(/$log-root)
     file-name="{0:yyyyMMdd}-$($name).csv.log"
     generate-failover-msg=false
    }
  }

  object-store { name="Main Object Store"
                 guid="A2E59DBB-27AE-4803-A19E-72C99DD8956E"
                 object-life-span-ms="180000"
                 bucket-count="1024"


    provider
    {
              name="Disk Object Store Provider"
              type="Azos.Apps.Volatile.FileObjectStoreProvider"
              load-limit="0"
              root-path=$(/$log-root)
    }

  }


  /*instrumentation
  {
      name="Instruments" interval-ms="2000"
      provider
      {
         name="Telemetry Instrumentation Provider"
         type="Azos.Instrumentation.Telemetry.TelemetryInstrumentationProvider"
         use-log="false"
         receiver-node="sync://127.0.0.1:8300"
      }
  }*/

  wave
  {
    server
    {
       // name="Main Test Server"
  //parallel-works=1282048
  //parallel-accepts=128024
  //kernel-http-queue-limit=512000

        environment-name="PROD"
        instrumentation-enabled=true

        prefix{ name="http://+:8080/" }

        default-error-handler
        {
            show-dump { match{name=all} }
            //log {  match{name=all} }
        }

        gate
        {
            //type="may inject type"
            name="Default Gate"
            enabled = false


        dispatcher
        {



            filter
            {
              name="Errors" order=0 type="Azos.Wave.Filters.ErrorFilter, Azos.Wave"
              show-dump
              {
                match{name="localhost" order=1 is-local=true }
              }

               log
               {
                 match
                 {
                   name="composite"
                   type="Azos.Wave.CompositeWorkMatch, Azos.Wave"
                   and
                   {
                     match{name="butSecurity" type="Azos.Wave.NotAuthorizationExceptionMatch, Azos.Wave"}
                   }
                   or{}
                 }
               }//log
            }



  filter
  {
     order=1
     name="session"
     type="Azos.Wave.Filters.AuthorizeSessionFilter, Azos.Wave"

     //Enable database multi-targeting
     //the callers can supply this header with data context name
     data-context-header="wv-data-ctx"

     //An alias to Authorization header
     //This can be useful for browser-based sticky headers
     alt-authorization-header="wv-pass"

     //When set, enables gating of bad auth by bumping the named variable by +1
     gate-bad-auth-var="session_badAuth" //see gate.laconf

     //When set, forces the treatment of Bearer scheme token starting with this prefix as Basic
     //this is used for some integrations which are not capable of setting proper auth scheme
     //bearer-basic-prefix="treat-as-basic--"

     //You can temporarily turn this on to pretend that callers have sent this in
     //used for temp testing od clients and should always be disabled in prod
     //////// default-impersonation-authorization-header-value="Basic xxxxxxxxxxxxx"
  }


//**************** AUTHKIT TESTING
  handler
  {
    order=12
    name="minidp.apis"
    type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"
    type-location{ assembly="Azos.Wave.dll" ns{ name="Azos.Security.MinIdp*"}}

    log-level=Debug

    match{ order=1 path="/v1/minidp/{type}/{mvc-action}/{id}" var{query-name="*"} }
    match{ order=2 path="/minidp/{type}/{mvc-action}/{id}"    var{query-name="*"} }
  }


  handler
  {
    order=15
    name="idp.apis"
    type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"
    type-location{ assembly="Azos.AuthKit.Server.dll" ns{ name="Azos.AuthKit.Server.Web"}}

    log-level=Debug

    match{ order=1 path="/v1/idp/{type}/{mvc-action}/{id}" var{query-name="*"} }
    match{ order=2 path="/idp/{type}/{mvc-action}/{id}"    var{query-name="*"} }
  }
//**************** AUTHKIT TESTING


        }//dispatcher
    }//server
  }//wave



  security
  {
    type="Azos.Security.MinIdpSecurityManager, Azos"
        //todo
  }


  modules
  {
    //Responsible for generating Global Distributed Id (GDID)
    //The `local` environment uses local authority for testing instead of true id service
    //the local authority generates gdid based on timestamp prefixes and has worse resolution
    module
    {
        name="gdidprovider"
        type="Azos.Sky.Identification.GdidProviderModule, Azos.Sky"
        log-level=$(/machine/$log-level-comp)

        use-local-authority=true
        generator
        {
            //As a protection mechanism in case when various environments share the same
            //physical data store, we set era to some unrealistic number in future so
            //the ids never clash
            era=0xff$(~SKY_NODE_DISCRIMINATOR)00//use unrealistic era for a very distant future
            authority=0
        }
    }


    module
    {
      type='Azos.Security.Services.OAuthModule, Azos'
      supported-scopes="openid connect"
    }

    module
    {
      type='Azos.Conf.Forest.Server.ForestLogic, Azos'

      data
      {
        type="Azos.Conf.Forest.Server.ForestDataSource, Azos"
        forest
        {
          name="sherwood"
          tree
          {
            name="t1"
            type="Azos.MySql.ConfForest.MySqlConfForestTreeDataStore, Azos.MySql"
            connect-string="Server=localhost;Database=sherwood_t1;Uid=svcbasic;Pwd=thejake;"
            //Defines where query objects are resolved into
            script-assembly="Azos.MySql"
            handler-location{ns="Azos.MySql.ConfForest.Queries, Azos.MySql"}
          }

          tree
          {
            name="t2"
            type="Azos.MySql.ConfForest.MySqlConfForestTreeDataStore, Azos.MySql"
            connect-string="Server=localhost;Database=sherwood_t2;Uid=svcbasic;Pwd=thejake;"
            //Defines where query objects are resolved into
            script-assembly="Azos.MySql"
            handler-location{ns="Azos.MySql.ConfForest.Queries, Azos.MySql"}
          }

        }
      }
    }
  }

}
