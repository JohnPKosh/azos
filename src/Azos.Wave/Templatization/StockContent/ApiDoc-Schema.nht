#<laconf>
  compiler
  {
     base-class-name="Azos.Wave.Templatization.StockContent.Master"
     using{ns="Azos.Serialization.JSON"}
     using{ns="Azos.Conf"}
     using{ns="System.Linq"}
     namespace="Azos.Wave.Templatization.StockContent"
     abstract="false"
     summary="ApiDoc Index Page"
  }
#</laconf>
#[class]

  public readonly IEnumerable<IConfigSectionNode> Data;
  public ApiDoc_Schema(IEnumerable<IConfigSectionNode> data) : base()  => Data = data;
  public override string Title { get {return "Azos Api Documentation Schema"; } }

#[override renderHeader()]
 Api Type Schema

#[override renderBody()]
<h1>"?[Data.First().ValOf("sku")]" Schema</h1>
This section describes a complex (non-scalar) data type "?[Data.First().ValOf("sku")]" used by API operations.
Go back to <a href="./toc">Api Table of Contents.</a>
@[{
  var cnt = 1;
  foreach(var item in Data) type(cnt++, item);
}]
Go back to <a href="./toc">Api Table of Contents.</a>

#[type(int cnt, IConfigSectionNode data)]
@[
  var docData = data["data-doc"];
  var permData = data["permission"];
  if (docData.Exists) doc(docData);
  if (permData.Exists) perm(permData);
]
<h3>Raw Schema Data</h3>
<pre>
  ?[data.ToLaconicString(CodeAnalysis.Laconfig.LaconfigWritingOptions.PrettyPrint)]
</pre>
<hr>

#[perm(IConfigSectionNode data)]
This type is a <strong>security permission</strong> see <a href="https://github.com/azist/azos/tree/master/src/Azos/Security">Azos Security Overview (GitHub)</a>


#[doc(IConfigSectionNode data)]
This type is a <strong>data document</strong> see <a href="https://github.com/azist/azos/blob/master/src/Azos/Data/metadata.md">Azos Schema Metadata Overview (GitHub)</a>
<table>
@[{
  var fields = data["schema"].Children.Where(c => c.IsSameName("field"));
  foreach(var fld in fields) docField(fld);
}]
</table>


#[docField(IConfigSectionNode data)]
<tr>
 <td>?[data.ValOf("order")]</td>
 <td>?[data.ValOf("name")]</td>
 <td>?[data.ValOf("type")]</td>
 <td>?[data.ValOf("required")]</td>
 <td>?[data.ValOf("kind")]</td>
 <td>?[data.ValOf("key")]</td>
 <td>?[data.ValOf("visible")]</td>
 <td>?[data.ValOf("case")]</td>

</tr>
